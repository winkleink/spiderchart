# Code to create spider diagrams 
# Wonky code created by @Winkleink (2016)
# Licence: MIT

# It does one thing (hopefully every time) but there is guarantee that it will work for you

# It runs successfully on a Raspberry Pi 

# Make sure all all files are in the same folder

# This program takes 3 input files

# Student_Scores.csv 
# File with the list of students and their scores 
# This is created using Student Scores.ods and OpenOffice

# spider_data_points.csv
# Contains the co-ordinates for the didderent points on the spider diagram
# You only need to edit this file if you change the location of the points on the spider diagra,

# __spider.png
# Blank version of the spider diagram
# Do not edit this file

# On running the code the co-ordinates are read and then each students scores are read and plotted on the screen
# Don't worry if the image is too big for your monitor it is working correctly

# It then goes through each student plotting and connecting their points by lines
# Once completed a .jpeg file is created using the students name as the filename

# Once done you will have individual jpeg files for each of the students with their scores plotted

# If you want to create your own __spider.png you can use __spider.svg which was created using Inkscape
# As long as you don't move the spiders web you should be able to add your own embellishments  to customize the output to match your needs

# Images for the characters created by  Andrew Palfreyman

# import relevant libraries
from pygame import *
import time

# class to create sprites and render them
class Sprite:
    def __init__(self,xpos,ypos,filename):
        self.x=xpos
        self.y=ypos
        self.bitmap=image.load(filename)
        print(self.x)
        print(self.y)
        print(filename)
    def render(self):
        screen.blit(self.bitmap,(self.x,self.y))
  
# initialise pygame
init()

# sdet up some colours and a font for the text
black=[0,0,0]
white=[255,255,255]
red=[255,0,0]
blue=[0,0,255]
myfont=font.SysFont("DejaVu Sans", 90)

# size of the window based on the __spider.png file size so it fills the screen 
SCREEN_WIDTH = 3508
SCREEN_HEIGHT = 2481
size=[SCREEN_WIDTH,SCREEN_HEIGHT]

# some set up st
screen=display.set_mode(size)
screen.fill(white)
display.set_caption("Spider Chart Maker")

# set  __spider.png as background 
background=Sprite(0,0,"__spider.png")
background.render()

# You have to execute an update to get the screen to refresh
display.update()


# Variables to whole the 2 csv input files
studentfile="Student_Scores.csv"
coordinatefile="spider_data_points.csv"

# Co-ordinated list
clist = open(coordinatefile).read().split('\n')

# Loop to go through each student 
with open(studentfile,"r") as slist:
    next(slist) #removes header

# Get student name and scores (I suspect a list would be neater for this)
    for line in slist:
        student= line.strip("\r\n").split(",")
        print student[0]
        sname = student[0] #student name
        scode = int(student[1])+1
        snet = int(student[2])+1
        ssearch = int(student[3])+1
        slogic = int(student[4])+1
        stech = int(student[5])+1
        shardware = int(student[6])+1
        
        print ("Len clist and scode coordinates")
        print (len(clist))
        print ("scode  " + str(scode))
        print ("clist line: " + clist[scode])
        
# Get co-ordinates for code         
        scoord = clist[scode].strip("\r\n").split(",")
        print("scoord is: ")
        print (scoord)
        scodex = int(scoord[1])
        scodey = int(scoord[2])
        
# Get co-ordinates for net 
        scoord = clist[snet].strip("\r\n").split(",")
        print("scoord is: ")
        print (scoord)
        snetx = int(scoord[3])
        snety = int(scoord[4])

# Get co-ordinates for search         
        scoord = clist[ssearch].strip("\r\n").split(",")
        print("scoord is: ")
        print (scoord)
        ssearchx = int(scoord[5])
        ssearchy = int(scoord[6])
        
        scoord = clist[slogic].strip("\r\n").split(",")
        print("scoord is: ")
        print (scoord)
        slogicx = int(scoord[7])
        slogicy = int(scoord[8])
        
# Get co-ordinates for tech 
        scoord = clist[stech].strip("\r\n").split(",")
        print("scoord is: ")
        print (scoord)
        stechx = int(scoord[9])
        stechy = int(scoord[10])
        
# Get co-ordinates for hardware 
        scoord = clist[shardware].strip("\r\n").split(",")
        print("scoord is: ")
        print (scoord)
        shardwarex = int(scoord[11])
        shardwarey = int(scoord[12])

# Print the student name and co-ordinates to the screen for checking if something goes wrong
        print ("student name:" + sname)
        print ("scode x,y: " + str(scodex) + " , " + str(scodey))
        print ("snet x,y: " + str(snetx) + " , " + str(snety))
        print ("sseach x,y: " + str(ssearchx) + " , " + str(ssearchy))
        print ("slogic x,y: " + str(slogicx) + " , " + str(slogicy))
        print ("stech x,y: " + str(stechx) + " , " + str(stechy))
        print ("shardware x,y: " + str(shardwarex) + " , " + str(shardwarey))

# Draw red circles at the score points
        draw.circle(screen,red,(scodex,scodey),40,0)
        draw.circle(screen,red,(snetx,snety),40,0)
        draw.circle(screen,red,(ssearchx,ssearchy),40,0)
        draw.circle(screen,red,(slogicx,slogicy),40,0)
        draw.circle(screen,red,(stechx,stechy),40,0)
        draw.circle(screen,red,(shardwarex,shardwarey),40,0)
        
# Draw the lines between the points
        draw.lines(screen,red,False,[(scodex,scodey),(snetx,snety),(ssearchx,ssearchy),(slogicx,slogicy),(stechx,stechy),(shardwarex,shardwarey),(scodex,scodey)],20)

# Draw student name top left
        # font = pygame.font.Font(None, 25)
        nametext = myfont.render(sname, True, black)
        text_rect = nametext.get_rect(center=(SCREEN_WIDTH/2, 2144))
        screen.blit(nametext, text_rect)


        # namewidth = sname.get_rect().width
        # screen.blit(myfont.render(sname,1,black),(1754-(namewidth/2),2144))

# all drawing done. Update the screen
        display.update()

# Save the screen with the students name
        
        image.save(screen,sname+".jpeg")
        
# Wait a second to admire your work        
        time.sleep(1)   
        
# Clear the screen and draw the clean spider diagram before starting all over again
        
        screen.fill(white)
        background.render()
        display.update()
